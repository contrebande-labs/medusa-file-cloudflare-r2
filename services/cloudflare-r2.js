var h=Object.create;var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var K=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var S=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},u=(r,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of k(e))!F.call(r,i)&&i!==t&&o(r,i,{get:()=>e[i],enumerable:!(s=b(e,i))||s.enumerable});return r};var l=(r,e,t)=>(t=r!=null?h(K(r)):{},u(e||!r||!r.__esModule?o(t,"default",{value:r,enumerable:!0}):t,r)),$=r=>u(o({},"__esModule",{value:!0}),r);var w={};S(w,{default:()=>m});module.exports=$(w);var d=l(require("fs")),y=l(require("aws-sdk/clients/s3")),_=require("@medusajs/medusa"),g=l(require("stream"));class m extends _.AbstractFileService{manager_;transactionManager_;bucket_;public_domain_;accessKeyId_;secretAccessKey_;region_;s3Endpoint_;constructor({},e){super({});const{bucket:t,public_domain:s,access_key_id:i,secret_access_key:c,region:a,s3_endpoint:n}=e;this.bucket_=t,this.public_domain_=s,this.accessKeyId_=i,this.secretAccessKey_=c,this.region_=a,this.s3Endpoint_=n}client(){return new y.default({signatureVersion:"v4",region:"auto",endpoint:this.s3Endpoint_,accessKeyId:this.accessKeyId_,secretAccessKey:this.secretAccessKey_})}upload(e){return this.uploadFile(e)}uploadProtected(e){return this.uploadFile(e,{acl:"private"})}async uploadFile(e,t){const s=this.client();console.log(e);const{path:i,originalname:c}=e,a={ACL:t?.acl??(t?.isProtected?"private":"public-read"),Bucket:this.bucket_,Body:d.default.createReadStream(i),Key:`${c}`};try{const{Location:n,Key:p}=await s.upload(a).promise();return console.log(`Returned "Location": ${n}`),console.log(`Returned "Key": ${p}`),{url:`${this.public_domain_}/${p}`}}catch(n){throw console.error(n),new Error("An error occurred while uploading the file.")}}async delete(e){const t=this.client(),s={Bucket:this.bucket_,Key:`${e}`};await t.deleteObject(s).promise()}async getUploadStreamDescriptor(e){const t=new g.default.PassThrough,s=`${e.name}.${e.ext}`,i={ACL:e.acl??"private",Bucket:this.bucket_,Body:t,Key:s},c=this.client();return{writeStream:t,promise:c.upload(i).promise(),url:`${this.public_domain_}/${s}`,fileKey:s}}async getDownloadStream(e){const t=this.client(),s={Bucket:this.bucket_,Key:`${e.fileKey}`};return t.getObject(s).createReadStream()}async getPresignedDownloadUrl(e){const t=this.client(),s={Bucket:this.bucket_,Key:`${e.fileKey}`,Expires:60};return await t.getSignedUrlPromise("getObject",s)}}
